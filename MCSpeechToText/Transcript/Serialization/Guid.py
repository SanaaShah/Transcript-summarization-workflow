# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Serialization

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Guid(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Guid()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGuid(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Guid
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Guid
    def MValue1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Guid
    def MValue2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(2)
def GuidStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddMValue1(builder, mValue1): builder.PrependUint64Slot(0, mValue1, 0)
def GuidAddMValue1(builder, mValue1):
    """This method is deprecated. Please switch to AddMValue1."""
    return AddMValue1(builder, mValue1)
def AddMValue2(builder, mValue2): builder.PrependUint64Slot(1, mValue2, 0)
def GuidAddMValue2(builder, mValue2):
    """This method is deprecated. Please switch to AddMValue2."""
    return AddMValue2(builder, mValue2)
def End(builder): return builder.EndObject()
def GuidEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)