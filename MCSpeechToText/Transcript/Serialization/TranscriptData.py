# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Serialization

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TranscriptData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TranscriptData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTranscriptData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TranscriptData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TranscriptData
    def TranscriptSegments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MCSpeechToText.Transcript.Serialization.Segment import Segment
            obj = Segment()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TranscriptData
    def TranscriptSegmentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TranscriptData
    def TranscriptSegmentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # TranscriptData
    def LanguageCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TranscriptData
    def Stage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TranscriptData
    def TranscriptionID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MCSpeechToText.Transcript.Serialization.Guid import Guid
            obj = Guid()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TranscriptData
    def AudioFilePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TranscriptData
    def Speakers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MCSpeechToText.Transcript.Serialization.Speaker import Speaker
            obj = Speaker()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TranscriptData
    def SpeakersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TranscriptData
    def SpeakersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def Start(builder): builder.StartObject(6)
def TranscriptDataStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddTranscriptSegments(builder, transcriptSegments): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(transcriptSegments), 0)
def TranscriptDataAddTranscriptSegments(builder, transcriptSegments):
    """This method is deprecated. Please switch to AddTranscriptSegments."""
    return AddTranscriptSegments(builder, transcriptSegments)
def StartTranscriptSegmentsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TranscriptDataStartTranscriptSegmentsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartTranscriptSegmentsVector(builder, numElems)
def AddLanguageCode(builder, languageCode): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(languageCode), 0)
def TranscriptDataAddLanguageCode(builder, languageCode):
    """This method is deprecated. Please switch to AddLanguageCode."""
    return AddLanguageCode(builder, languageCode)
def AddStage(builder, stage): builder.PrependInt32Slot(2, stage, 0)
def TranscriptDataAddStage(builder, stage):
    """This method is deprecated. Please switch to AddStage."""
    return AddStage(builder, stage)
def AddTranscriptionID(builder, transcriptionID): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(transcriptionID), 0)
def TranscriptDataAddTranscriptionID(builder, transcriptionID):
    """This method is deprecated. Please switch to AddTranscriptionID."""
    return AddTranscriptionID(builder, transcriptionID)
def AddAudioFilePath(builder, audioFilePath): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(audioFilePath), 0)
def TranscriptDataAddAudioFilePath(builder, audioFilePath):
    """This method is deprecated. Please switch to AddAudioFilePath."""
    return AddAudioFilePath(builder, audioFilePath)
def AddSpeakers(builder, speakers): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(speakers), 0)
def TranscriptDataAddSpeakers(builder, speakers):
    """This method is deprecated. Please switch to AddSpeakers."""
    return AddSpeakers(builder, speakers)
def StartSpeakersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TranscriptDataStartSpeakersVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSpeakersVector(builder, numElems)
def End(builder): return builder.EndObject()
def TranscriptDataEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)