# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Serialization

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Segment(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Segment()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSegment(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Segment
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Segment
    def Start(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Segment
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Segment
    def SpeakerID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from MCSpeechToText.Transcript.Serialization.Guid import Guid
            obj = Guid()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Segment
    def SegmentWords(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MCSpeechToText.Transcript.Serialization.Word import Word
            obj = Word()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Segment
    def SegmentWordsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Segment
    def SegmentWordsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Segment
    def LanguageCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(5)
def SegmentStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddStart(builder, start): builder.PrependInt64Slot(0, start, 0)
def SegmentAddStart(builder, start):
    """This method is deprecated. Please switch to AddStart."""
    return AddStart(builder, start)
def AddDuration(builder, duration): builder.PrependInt64Slot(1, duration, 0)
def SegmentAddDuration(builder, duration):
    """This method is deprecated. Please switch to AddDuration."""
    return AddDuration(builder, duration)
def AddSpeakerID(builder, speakerID): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(speakerID), 0)
def SegmentAddSpeakerID(builder, speakerID):
    """This method is deprecated. Please switch to AddSpeakerID."""
    return AddSpeakerID(builder, speakerID)
def AddSegmentWords(builder, segmentWords): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(segmentWords), 0)
def SegmentAddSegmentWords(builder, segmentWords):
    """This method is deprecated. Please switch to AddSegmentWords."""
    return AddSegmentWords(builder, segmentWords)
def StartSegmentWordsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SegmentStartSegmentWordsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSegmentWordsVector(builder, numElems)
def AddLanguageCode(builder, languageCode): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(languageCode), 0)
def SegmentAddLanguageCode(builder, languageCode):
    """This method is deprecated. Please switch to AddLanguageCode."""
    return AddLanguageCode(builder, languageCode)
def End(builder): return builder.EndObject()
def SegmentEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)